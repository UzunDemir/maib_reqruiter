import os
import streamlit as st
import requests
import json
import time
from PyPDF2 import PdfReader
import tempfile
from datetime import datetime
#from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
#load_dotenv()

# # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
# api_key = os.getenv("DEEPSEEK_API_KEY")
# if not api_key:
#     st.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å DEEPSEEK_API_KEY")
#     st.stop()

hide_github_icon = """
<style>
.css-1jc7ptx, .e1ewe7hr3, .viewerBadge_container__1QSob, .styles_viewerBadge__1yB5_, .viewerBadge_link__1S137, .viewerBadge_text__1JaDK { 
    display: none !important; 
}
#MainMenu, footer, header { 
    display: none !important; 
}
</style>
"""

st.markdown(hide_github_icon, unsafe_allow_html=True)


st.sidebar.write("[Uzun Demir](https://uzundemir.github.io/)") #[Github](https://github.com/UzunDemir)     [Linkedin](https://www.linkedin.com/in/uzundemir/)     
st.sidebar.write("[Github](https://github.com/UzunDemir)")
st.sidebar.write("[Linkedin](https://www.linkedin.com/in/uzundemir/)")
st.sidebar.title("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
st.sidebar.title("TEST-passer (AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–µ—Å—Ç–∞–º)")
st.sidebar.divider()
st.sidebar.write(
        """
                                       
                     –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ü–µ–ª—è—Ö –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø—Ä–∏ —Å–¥–∞—á–µ —Ç–µ—Å—Ç–æ–≤ –ø–æ –õ–Æ–ë–û–ô –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–µ.                  

                     1. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? 
                     
                        –°—Ç—É–¥–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ pdf. TEST-passer –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–µ—Å—Ç—ã, –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 88%.
                     
                     2. –ü–æ—á–µ–º—É –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ (GPT, DeepSeek –∏ —Ç. –¥.)? 
                     
                        –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ–≥—Ä–æ–º–Ω–æ–º 
                        –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ–Ω–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –ª–∏—à—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç "–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞". 
                        –û–Ω–∞ —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä–æ–≤–∞—Ç—å", —Ç–æ –µ—Å—Ç—å –º–æ–∂–µ—Ç "–ø—Ä–∏–¥—É–º–∞—Ç—å" —Ñ–∞–∫—Ç, –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∑–≤—É—á–∏—Ç –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ.
                        –ü–æ—ç—Ç–æ–º—É –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–ª–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ù–£–ñ–ù–´–ô –∏–∞—Ç–µ—Ä–∏–∞–ª. 
                        
                     3. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?    
                     
                        * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pdf-—Ñ–∞–π–ª—ã (–ª—é–±—ã–µ –∫—É—Ä—Å—ã, –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç–µ–º—ã)
                        * –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–∏–Ω–≥ (–¥–µ–ª–∏—Ç –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º)
                        * –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (HyDE + –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞) 
                          (–∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∏–Ω–∞—á–µ —á–µ–º –≤ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö)
                        * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
                        * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DeepSeek –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏) 
                     
                     4. –ë—É–¥—É—Ç –ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏?

                        –î–∞, –±—É–¥—É—Ç:

                        * –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                        * –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π (–∞–Ω—Å–∞–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        * —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ 
                     
                        
                     """
    )

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
st.markdown("""
    <style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        /height: 5vh;
        text-align: center;
        flex-direction: column;
        margin-top: 0vh;  /* –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É */
    }
    .github-icon:hover {
        color: #4078c0; /* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    }
    </style>
    <div class="center">
        <img src="https://github.com/UzunDemir/mnist_777/blob/main/200w.gif?raw=true">
        <h1>TEST-passer</h1>
        <h2>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–µ—Å—Ç–∞–º</h2>
        <p> (—Å—Ç—Ä–æ–≥–æ –ø–æ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º)</p>
    </div>
    """, unsafe_allow_html=True)

st.divider()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–≤—ã
stroke_width = 10
stroke_color = "black"
bg_color = "white"
drawing_mode = "freedraw"

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
api_key = st.secrets.get("DEEPSEEK_API_KEY")
if not api_key:
    st.error("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.")
    st.stop()

url = "https://api.deepseek.com/v1/chat/completions"

headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

class KnowledgeBase:
    def __init__(self):
        self.documents = {}
        self.uploaded_files = []
    
    def load_pdf(self, file_content, file_name):
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file.write(file_content)
                tmp_file_path = tmp_file.name
            
            with open(tmp_file_path, 'rb') as file:
                reader = PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                
                self.documents[file_name] = text
                self.uploaded_files.append(file_name)
                return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")
            return False
        finally:
            if os.path.exists(tmp_file_path):
                os.unlink(tmp_file_path)
    
    def get_all_text(self):
        return "\n\n".join([f"### {name}\n{text}" for name, text in self.documents.items()])
    
    def get_document_names(self):
        return self.uploaded_files

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'knowledge_base' not in st.session_state:
    st.session_state.knowledge_base = KnowledgeBase()

if 'messages' not in st.session_state:
    st.session_state.messages = []

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
#st.title("AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–µ—Å—Ç–∞–º (—Å—Ç—Ä–æ–≥–æ –ø–æ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º)")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF", type="pdf", accept_multiple_files=True)
if uploaded_files:
    for uploaded_file in uploaded_files:
        if uploaded_file.name not in st.session_state.knowledge_base.get_document_names():
            success = st.session_state.knowledge_base.load_pdf(uploaded_file.getvalue(), uploaded_file.name)
            if success:
                st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
if st.session_state.knowledge_base.get_document_names():
    st.subheader("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
    for doc in st.session_state.knowledge_base.get_document_names():
        st.markdown(f"- {doc}")
else:
    st.info("‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    context = st.session_state.knowledge_base.get_all_text()
    full_prompt = f""""Answer strictly based on the educational materials provided below.
    Respond in the same language the question is written in.
    If the answer is not found in the materials, reply with: 'Answer not found in the materials'.
    
    Materials:
    {context}
    
    Question: {prompt}"""
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": full_prompt}],
        "stream": True
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç..."):
        start_time = datetime.now()
        
        try:
            response = requests.post(url, headers=headers, json=data, stream=True)
            
            if response.status_code == 200:
                full_response = ""
                message_placeholder = st.empty()
                
                for line in response.iter_lines():
                    if line:
                        decoded_line = line.decode('utf-8')
                        
                        if decoded_line.startswith("data:"):
                            json_data = decoded_line[5:].strip()
                            
                            if json_data == "[DONE]":
                                break
                            
                            try:
                                data = json.loads(json_data)
                                if 'choices' in data and len(data['choices']) > 0:
                                    chunk_content = data['choices'][0]['delta'].get('content', '')
                                    if chunk_content:
                                        full_response += chunk_content
                                        message_placeholder.markdown(f"ü§ñ {full_response}")
                                        time.sleep(0.05)
                            except json.JSONDecodeError:
                                continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.messages.append({"role": "assistant", "content": full_response})
                with st.chat_message("assistant"):
                    if "–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" in full_response.lower():
                        st.markdown(f"{full_response} ‚ùå")
                    else:
                        st.markdown(f"{full_response} ‚úÖ")
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                st.info(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω—è–ª {duration:.2f} —Å–µ–∫—É–Ω–¥")
            else:
                st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
    st.session_state.messages = []
    st.rerun()
