import os
import streamlit as st
import requests
import json
import time
from PyPDF2 import PdfReader
import tempfile
from datetime import datetime
from transformers import AutoTokenizer
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
st.set_page_config(layout="wide", initial_sidebar_state="expanded")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
#tokenizer = AutoTokenizer.from_pretrained("deepseek-ai/deepseek-llm")
from transformers import GPT2Tokenizer
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
# st.sidebar.image("https://www.maib.md/uploads/custom_blocks/image_1633004921_8nR1jw3Qfu_auto__0.png", use_container_width=True)

# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ HTML+JS –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ + —Å–∫—Ä—ã—Ç–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é, —Ñ—É—Ç–µ—Ä–∞ –∏ —Ö–µ–¥–µ—Ä–∞
st.markdown("""
    <style>
        /* –°–∞–π–¥–±–∞—Ä —Ü–µ–ª–∏–∫–æ–º */
        section[data-testid="stSidebar"] {
            background-color: #253646 !important;
        }

        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∞–π–¥–±–∞—Ä–∞ */
        .sidebar-title {
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1rem;
        }

        /* –¢–µ–∫—Å—Ç –≤ —Å–∞–π–¥–±–∞—Ä–µ */
        .sidebar-text {
            color: white;
        }

        /* –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é, —Ñ—É—Ç–µ—Ä –∏ —Ö–µ–¥–µ—Ä Streamlit */
        #MainMenu, footer, header {
            display: none !important;
        }
    </style>
""", unsafe_allow_html=True)


# –¢–µ–∫—Å—Ç –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.markdown('<div class="sidebar-title">Proiect: AI Recruiter pentru MAIB</div>', unsafe_allow_html=True)
# st.sidebar.markdown('<div class="sidebar-title">HR-RECRUITER</div>', unsafe_allow_html=True)

st.sidebar.divider()

st.sidebar.markdown("""
<div class="sidebar-text">

1. üì• **√éncƒÉrcarea posturilor vacante**

   *Agentul √ÆncarcƒÉ automat toate posturile vacante actuale de la MAIB.*

2. üìÑ **CV-ul utilizatorului**

   *Utilizatorul √Æ»ôi √ÆncarcƒÉ CV-ul pentru analizƒÉ.*

3. ü§ñ **CƒÉutarea posturilor potrivite**

   * *Agentul analizeazƒÉ CV-ul »ôi identificƒÉ **top 3 posturi** relevante pentru experien»õa »ôi competen»õele candidatului.*

4. üîç **Analiza celei mai relevante pozi»õii**

   * *Eviden»õiazƒÉ **punctele forte** ale candidatului.*
   * *IdentificƒÉ **punctele slabe** sau lipsurile √Æn competen»õe.*

5. ‚úÖ **Acordul candidatului**

   *DacƒÉ este interesat, candidatul √Æ»ôi exprimƒÉ acordul pentru a continua procesul.*

6. üó£Ô∏è **Primul interviu (general)**

   *Agentul pune √ÆntrebƒÉri generale, analizeazƒÉ rƒÉspunsurile »ôi formuleazƒÉ **primele concluzii**.*

7. üíª **Interviul tehnic**

   *Evaluarea competen»õelor tehnice ale candidatului √Æn raport cu cerin»õele postului »ôi furnizarea unui **feedback tehnic**.*

8. üìã **Concluzia finalƒÉ**

   *Agentul oferƒÉ un verdict final: **recomandare pentru angajare** sau **refuz argumentat**.*

---
</div>
""", unsafe_allow_html=True)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
st.markdown("""
    <style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        /height: 5vh;
        text-align: center;
        flex-direction: column;
        margin-top: 0vh;  /* –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É */
    }
    .github-icon:hover {
        color: #4078c0; /* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    }
    </style>
    <div class="center">
        <img src="https://www.maib.md/uploads/custom_blocks/image_1633004921_8nR1jw3Qfu_auto__0.png" width="300">
        <h1>HR-reqruiter</h1>        
    </div>
    """, unsafe_allow_html=True)

st.divider()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–≤—ã
stroke_width = 10
stroke_color = "black"
bg_color = "white"
drawing_mode = "freedraw"

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
api_key = st.secrets.get("DEEPSEEK_API_KEY")
if not api_key:
    st.error("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.")
    st.stop()

url = "https://api.deepseek.com/v1/chat/completions"
headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

class DocumentChunk:
    def __init__(self, text, doc_name, page_num):
        self.text = text
        self.doc_name = doc_name
        self.page_num = page_num
        self.embedding = None

class KnowledgeBase:
    def __init__(self):
        self.chunks = []
        self.uploaded_files = []
        self.vectorizer = TfidfVectorizer(stop_words='english')
        self.tfidf_matrix = None
        self.doc_texts = []
    
    def split_text(self, text, max_tokens=2000):
        paragraphs = text.split('\n\n')
        chunks = []
        current_chunk = ""
        
        for para in paragraphs:
            para = para.strip()
            if not para:
                continue
                
            tokens = tokenizer.tokenize(para)
            if len(tokenizer.tokenize(current_chunk + para)) > max_tokens:
                if current_chunk:
                    chunks.append(current_chunk)
                    current_chunk = para
                else:
                    chunks.append(para)
                    current_chunk = ""
            else:
                if current_chunk:
                    current_chunk += "\n\n" + para
                else:
                    current_chunk = para
        
        if current_chunk:
            chunks.append(current_chunk)
            
        return chunks
    
    def load_pdf(self, file_content, file_name):
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file.write(file_content)
                tmp_file_path = tmp_file.name
            
            with open(tmp_file_path, 'rb') as file:
                reader = PdfReader(file)
                for page_num, page in enumerate(reader.pages):
                    page_text = page.extract_text()
                    if page_text:
                        chunks = self.split_text(page_text)
                        for chunk in chunks:
                            self.chunks.append(DocumentChunk(
                                text=chunk,
                                doc_name=file_name,
                                page_num=page_num + 1
                            ))
                            self.doc_texts.append(chunk)
                
                if self.chunks:
                    self.uploaded_files.append(file_name)
                    # –û–±–Ω–æ–≤–ª—è–µ–º TF-IDF –º–∞—Ç—Ä–∏—Ü—É
                    self.tfidf_matrix = self.vectorizer.fit_transform(self.doc_texts)
                    return True
                else:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {file_name}")
                    return False
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")
            return False
        finally:
            if os.path.exists(tmp_file_path):
                os.unlink(tmp_file_path)
    
    def find_most_relevant_chunks(self, query, top_k=3):
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ —Å –ø–æ–º–æ—â—å—é TF-IDF –∏ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞"""
        if not self.chunks:
            return []
            
        query_vec = self.vectorizer.transform([query])
        similarities = cosine_similarity(query_vec, self.tfidf_matrix)
        top_indices = np.argsort(similarities[0])[-top_k:][::-1]
        
        return [(self.chunks[i].text, self.chunks[i].doc_name, self.chunks[i].page_num) 
                for i in top_indices if similarities[0][i] > 0.1]
    
    def get_document_names(self):
        return self.uploaded_files

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'knowledge_base' not in st.session_state:
    st.session_state.knowledge_base = KnowledgeBase()

if 'messages' not in st.session_state:
    st.session_state.messages = []

############################################
import streamlit as st
import requests
from bs4 import BeautifulSoup
import time
import json

st.title("–ü–∞—Ä—Å–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–π MAIB")

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
}

# –í–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
urls_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ):")

if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"):
    if not urls_text.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
    else:
        urls = urls_text.strip().split('\n')
        vacancies_data = []

        progress_bar = st.progress(0)
        status_text = st.empty()

        for i, url in enumerate(urls):
            try:
                response = requests.get(url.strip(), headers=headers)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')

                title_tag = soup.find('h1')
                title = title_tag.get_text(strip=True) if title_tag else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'

                vacancy_content = soup.find('div', class_='vacancy-content')
                description = vacancy_content.get_text(separator='\n', strip=True) if vacancy_content else '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

                vacancies_data.append({
                    'url': url,
                    'title': title,
                    'description': description
                })

                status_text.text(f"[{i+1}/{len(urls)}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: {title}")

                progress_bar.progress((i + 1) / len(urls))
                time.sleep(1)  # –ø–∞—É–∑–∞ –¥–ª—è —É–≤–∞–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞

            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

        st.success(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies_data)}")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for vacancy in vacancies_data:
            st.subheader(vacancy['title'])
            st.write(vacancy['description'])
            st.markdown(f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é]({vacancy['url']})")

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        json_data = json.dumps(vacancies_data, ensure_ascii=False, indent=4)
        st.download_button("–°–∫–∞—á–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ JSON", data=json_data, file_name="vacancies.json", mime="application/json")

#################################################################



# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
uploaded_files = st.file_uploader("√éncarcƒÉ CV-ul tƒÉu √Æn format PDF", type="pdf", accept_multiple_files=True)
if uploaded_files:
    for uploaded_file in uploaded_files:
        if uploaded_file.name not in st.session_state.knowledge_base.get_document_names():
            success = st.session_state.knowledge_base.load_pdf(uploaded_file.getvalue(), uploaded_file.name)
            if success:
                st.success(f"Fi»ôierul {uploaded_file.name} a fost √ÆncƒÉrcat cu succes!")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
if st.session_state.knowledge_base.get_document_names():
    st.subheader("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
    for doc in st.session_state.knowledge_base.get_document_names():
        st.markdown(f"- {doc}")
else:
    st.info("‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    relevant_chunks = st.session_state.knowledge_base.find_most_relevant_chunks(prompt)
    
    if not relevant_chunks:
        response_text = "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö ‚ùå"
        st.session_state.messages.append({"role": "assistant", "content": response_text})
        with st.chat_message("assistant"):
            st.markdown(response_text)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        context = "\n\n".join([f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_name}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}\n{text}" 
                             for text, doc_name, page_num in relevant_chunks])
        
        full_prompt = f"""Answer strictly based on the educational materials provided below.
     Respond in the same language the question is written in.
     If the answer is not found in the materials, reply with: 'Answer not found in the materials'.
    
    
        
        educational materials: {prompt}
        
        relevant materials:
        {context}"""
        
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": full_prompt}],
            "max_tokens": 2000,
            "temperature": 0.1  # –£–º–µ–Ω—å—à–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        }
        
        with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç..."):
            start_time = datetime.now()
            
            try:
                response = requests.post(url, headers=headers, json=data)
                
                if response.status_code == 200:
                    response_data = response.json()
                    full_response = response_data['choices'][0]['message']['content']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    sources = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(
                        [f"- {doc_name}, —Å—Ç—Ä. {page_num}" for _, doc_name, page_num in relevant_chunks]
                    )
                    full_response += sources
                    
                    st.session_state.messages.append({"role": "assistant", "content": full_response})
                    with st.chat_message("assistant"):
                        st.markdown(full_response + " ‚úÖ")
                    
                    end_time = datetime.now()
                    duration = (end_time - start_time).total_seconds()
                    st.info(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω—è–ª {duration:.2f} —Å–µ–∫—É–Ω–¥")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
    st.session_state.messages = []
    st.rerun()
