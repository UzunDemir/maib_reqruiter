import os
import streamlit as st
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import time
import json
from PyPDF2 import PdfReader
import tempfile
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import docx
from docx import Document
import io
from concurrent.futures import ThreadPoolExecutor, as_completed

st.set_page_config(layout="wide", initial_sidebar_state="expanded")

# --- Language Settings ---
if 'language' not in st.session_state:
    st.session_state.language = 'rom'  # Default language

def get_translation(key):
    translations = {
        'rom': {
            'app_title': 'AI HR-Recruiter',
            'sidebar_title': 'MAIB AI HR-Recruiter',
            'load_vacancies': '√éncarcƒÉ ofertele de muncƒÉ pentru tine...',
            'vacancies_list': 'Lista ofertelor MAIB:',
            'upload_cv': '√éncƒÉrcƒÉ CV-ul tƒÉu (PDF, DOCX, TXT)',
            'best_matches': 'Cele mai relevante oferte pentru CV-ul tƒÉu',
            'generate_analysis': 'GenereazƒÉ analiza de potrivire',
            'detailed_analysis': 'AnalizƒÉ detaliatƒÉ a conformitƒÉ»õii',
            'download_analysis': 'DescarcƒÉ analiza (DOCX)',
            'start_interview': 'A trece interviul introductiv',
            'interview_in_progress': 'Interviul a √Ænceput! VƒÉ rog sƒÉ rƒÉspunde»õi la √ÆntrebƒÉrile de mai jos.',
            'finish_interview': 'Interviul s-a √Æncheiat',
            'start_technical': '√éncepe interviul tehnic',
            'technical_in_progress': 'Interviul tehnic a √Ænceput! VƒÉ rugƒÉm sƒÉ rƒÉspunde»õi la √ÆntrebƒÉrile de mai jos.',
            'finish_technical': 'FinalizeazƒÉ interviul tehnic',
            'technical_feedback': 'Feedback tehnic',
            'final_conclusion': 'Concluzia finalƒÉ',
            'reset_process': 'ReseteazƒÉ procesul',
            'candidate_profile': 'Profilul candidatului',
            'download_profile': 'DescarcƒÉ profilul candidatului (DOCX)',
            'current_step': 'Etapa curentƒÉ:',
            'step1': '√éncƒÉrcare CV',
            'step2': 'AnalizƒÉ potrivire',
            'step3': 'Interviu general',
            'step4': 'Interviu tehnic',
            'step5': 'Concluzie finalƒÉ'
        },
        'rus': {
            'app_title': 'AI HR-–†–µ–∫—Ä—É—Ç–µ—Ä',
            'sidebar_title': 'MAIB AI HR-–†–µ–∫—Ä—É—Ç–µ—Ä',
            'load_vacancies': '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å...',
            'vacancies_list': '–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π MAIB:',
            'upload_cv': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF, DOCX, TXT)',
            'best_matches': '–°–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ',
            'generate_analysis': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            'detailed_analysis': '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            'download_analysis': '–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ (DOCX)',
            'start_interview': '–ù–∞—á–∞—Ç—å –æ–±—â–µ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'interview_in_progress': '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ.',
            'finish_interview': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'start_technical': '–ù–∞—á–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'technical_in_progress': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ.',
            'finish_technical': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'technical_feedback': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–∑—ã–≤',
            'final_conclusion': '–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥',
            'reset_process': '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å',
            'candidate_profile': '–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞',
            'download_profile': '–°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (DOCX)',
            'current_step': '–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:',
            'step1': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ',
            'step2': '–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            'step3': '–û–±—â–µ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'step4': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'step5': '–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥'
        },
        'en': {
            'app_title': 'AI HR-Recruiter',
            'sidebar_title': 'MAIB AI HR-Recruiter',
            'load_vacancies': 'Load job vacancies for you...',
            'vacancies_list': 'List of MAIB vacancies:',
            'upload_cv': 'Upload your CV (PDF, DOCX, TXT)',
            'best_matches': 'Most relevant job matches for your CV',
            'generate_analysis': 'Generate matching analysis',
            'detailed_analysis': 'Detailed compatibility analysis',
            'download_analysis': 'Download analysis (DOCX)',
            'start_interview': 'Start introductory interview',
            'interview_in_progress': 'Interview has started! Please answer the questions below.',
            'finish_interview': 'Interview completed',
            'start_technical': 'Start technical interview',
            'technical_in_progress': 'Technical interview has started! Please answer the questions below.',
            'finish_technical': 'Complete technical interview',
            'technical_feedback': 'Technical feedback',
            'final_conclusion': 'Final conclusion',
            'reset_process': 'Reset process',
            'candidate_profile': 'Candidate profile',
            'download_profile': 'Download candidate profile (DOCX)',
            'current_step': 'Current step:',
            'step1': 'CV Upload',
            'step2': 'Matching Analysis',
            'step3': 'General Interview',
            'step4': 'Technical Interview',
            'step5': 'Final Conclusion'
        }
    }
    return translations[st.session_state.language].get(key, key)

# --- Stiluri »ôi bara lateralƒÉ ---
st.markdown("""
    <style>
        section[data-testid="stSidebar"] {
            background-color: #253646 !important;
        }
        .sidebar-title {
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1rem;
        }
        .sidebar-text {
            color: white;
        }
        #MainMenu, footer, header {
            display: none !important;
        }
        .center {
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            flex-direction: column;
            margin-top: 0vh;
        }
        .match-card {
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #f0f2f6;
        }
        .match-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .progress-bar {
            height: 10px;
            background-color: #e0e0e0;
            border-radius: 5px;
            margin-top: 5px;
        }
        .progress-fill {
            height: 100%;
            border-radius: 5px;
            background-color: #40c1ac;
        }
        .current-step {
            background-color: #40c1ac;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
    <div class="center">
        <img src="https://www.maib.md/uploads/custom_blocks/image_1633004921_8nR1jw3Qfu_auto__0.png" width="300">
        <h1>{}</h1>
    </div>
""".format(get_translation('app_title')), unsafe_allow_html=True)

# --- Sidebar Content ---
with st.sidebar:
    st.markdown('<div class="sidebar-title">{}</div>'.format(get_translation('sidebar_title')), unsafe_allow_html=True)
    
    # Language selector
    language = st.radio("Language / –Ø–∑—ã–∫ / LimbƒÉ:", 
                       ["rom", "rus", "en"],
                       index=["rom", "rus", "en"].index(st.session_state.language),
                       key="lang_selector")
    
    if language != st.session_state.language:
        st.session_state.language = language
        st.rerun()
    
    st.divider()
    
    # Current step indicator
    current_step = 1
    if 'knowledge_base' in st.session_state and st.session_state.knowledge_base.uploaded_files:
        current_step = 2
    if 'analysis' in st.session_state and st.session_state.analysis:
        current_step = 3
    if 'profile' in st.session_state and st.session_state.profile:
        current_step = 4
    if 'final_recommendation' in st.session_state and st.session_state.final_recommendation:
        current_step = 5
    
    st.markdown(f'<div class="current-step">{get_translation("current_step")} {current_step}/5</div>', unsafe_allow_html=True)
    st.markdown(f"- {get_translation(f'step{current_step}')}")
    
    st.divider()
    
    # Process description
    st.markdown("""
    <div class="sidebar-text">
    1. üì• <strong>{}</strong>  
       <em>{}</em>

    2. üìÑ <strong>{}</strong>  
       <em>{}</em>

    3. ü§ñ <strong>{}</strong>  
       <em>{}</em>

    4. üîç <strong>{}</strong>  
       <em>{}<br>{}</em>

    5. ‚úÖ <strong>{}</strong>  
       <em>{}</em>

    6. üó£Ô∏è <strong>{}</strong>  
       <em>{}</em>

    7. ‚ö° <strong>{}</strong>    
       <em>{}</em>

    8. üíª <strong>{}</strong>  
       <em>{}</em>

    9. üìã <strong>{}</strong>  
       <em>{}</em>
    </div>
    """.format(
        get_translation('step1'), "Agentul √ÆncarcƒÉ automat toate posturile vacante actuale de la MAIB." if st.session_state.language == 'rom' else 
        "–ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ MAIB." if st.session_state.language == 'rus' else 
        "The agent automatically loads all current MAIB vacancies.",
        
        get_translation('step2'), "Utilizatorul √Æ»ôi √ÆncarcƒÉ CV-ul pentru analizƒÉ." if st.session_state.language == 'rom' else 
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞." if st.session_state.language == 'rus' else 
        "The user uploads their CV for analysis.",
        
        get_translation('step3'), "Agentul analizeazƒÉ CV-ul »ôi identificƒÉ top 3 posturi relevante." if st.session_state.language == 'rom' else 
        "–ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ø-3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π." if st.session_state.language == 'rus' else 
        "The agent analyzes the CV and identifies top 3 relevant positions.",
        
        get_translation('step4'), "Eviden»õiazƒÉ punctele forte ale candidatului." if st.session_state.language == 'rom' else 
        "–í—ã–¥–µ–ª—è–µ—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞." if st.session_state.language == 'rus' else 
        "Highlights the candidate's strengths.",
        
        "IdentificƒÉ punctele slabe sau lipsurile √Æn competen»õe." if st.session_state.language == 'rom' else 
        "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–≤—ã–∫–∞—Ö." if st.session_state.language == 'rus' else 
        "Identifies weaknesses or skill gaps.",
        
        get_translation('step5'), "DacƒÉ este interesat, candidatul √Æ»ôi exprimƒÉ acordul pentru a continua procesul." if st.session_state.language == 'rom' else 
        "–ï—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω, –∫–∞–Ω–¥–∏–¥–∞—Ç –≤—ã—Ä–∞–∂–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å." if st.session_state.language == 'rus' else 
        "If interested, the candidate agrees to continue the process.",
        
        get_translation('step3'), "Agentul pune √ÆntrebƒÉri generale, analizeazƒÉ rƒÉspunsurile »ôi formuleazƒÉ primele concluzii." if st.session_state.language == 'rom' else 
        "–ê–≥–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–µ –≤—ã–≤–æ–¥—ã." if st.session_state.language == 'rus' else 
        "The agent asks general questions, analyzes responses and formulates initial conclusions.",
        
        get_translation('step4'), "Identificarea »ôi verificarea textelor create automat pentru a asigura autenticitatea con»õinutului." if st.session_state.language == 'rom' else 
        "–í—ã—è–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏." if st.session_state.language == 'rus' else 
        "Identifying and verifying automatically generated text to ensure content authenticity.",
        
        get_translation('step4'), "Evaluarea competen»õelor tehnice »ôi furnizarea unui feedback tehnic." if st.session_state.language == 'rom' else 
        "–û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∑—ã–≤–∞." if st.session_state.language == 'rus' else 
        "Assessing technical skills and providing technical feedback.",
        
        get_translation('step5'), "Agentul oferƒÉ un verdict final: recomandare pentru angajare sau refuz argumentat." if st.session_state.language == 'rom' else 
        "–ê–≥–µ–Ω—Ç –≤—ã–Ω–æ—Å–∏—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –Ω–∞–π–º—É –∏–ª–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑." if st.session_state.language == 'rus' else 
        "The agent provides a final verdict: hiring recommendation or justified refusal."
    ), unsafe_allow_html=True)

    # Vacancies list in alphabetical order
    if 'vacancies_data' in st.session_state and st.session_state.vacancies_data:
        st.divider()
        st.markdown(f"### üîé {get_translation('vacancies_list')}")
        st.success(f"Oferte gƒÉsite: {len(st.session_state.vacancies_data)}" if st.session_state.language == 'rom' else 
                 f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(st.session_state.vacancies_data)}" if st.session_state.language == 'rus' else 
                 f"Found vacancies: {len(st.session_state.vacancies_data)}")
        
        # Sort vacancies alphabetically
        sorted_vacancies = sorted(st.session_state.vacancies_data, key=lambda x: x['title'])
        for vac in sorted_vacancies:
            st.markdown(
                f'<a href="{vac["url"]}" target="_blank" style="color:#40c1ac; text-decoration:none;">‚Ä¢ {vac["title"]}</a>',
                unsafe_allow_html=True
            )

st.divider()

# [Rest of your existing code remains the same, just replace all hardcoded strings with get_translation() calls]
# For example:
# st.title(get_translation('app_title'))
# st.button(get_translation('load_vacancies'))
# etc.

# --- DocumentChunk and KnowledgeBase classes remain the same ---
# [Previous DocumentChunk and KnowledgeBase class implementations]

# --- Initialize knowledge base ---
if 'knowledge_base' not in st.session_state:
    st.session_state.knowledge_base = KnowledgeBase()

if 'vacancies_data' not in st.session_state:
    st.session_state.vacancies_data = []

# --- Scrape vacancies function remains the same ---
# [Previous scrape_vacancy and load_vacancies functions]

if st.button(get_translation('load_vacancies')):
    load_vacancies()

# --- CV Upload Section ---
st.markdown(f"### üìÑ {get_translation('upload_cv')}")
uploaded_files = st.file_uploader(get_translation('upload_cv'), type=['pdf', 'docx', 'txt'], accept_multiple_files=True)

if uploaded_files:
    kb = st.session_state.knowledge_base
    kb.clear()
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, uploaded_file in enumerate(uploaded_files):
        success = kb.load_file(uploaded_file)
        progress = (i + 1) / len(uploaded_files)
        progress_bar.progress(progress)
        status_text.text(f"Se proceseazƒÉ fi»ôierul {i+1}/{len(uploaded_files)}: {uploaded_file.name}" if st.session_state.language == 'rom' else
                        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª {i+1}/{len(uploaded_files)}: {uploaded_file.name}" if st.session_state.language == 'rus' else
                        f"Processing file {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
    
    st.session_state.knowledge_base = kb
    st.success(f"Au fost √ÆncƒÉrcate {len(uploaded_files)} fi»ôiere!" if st.session_state.language == 'rom' else
              f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}" if st.session_state.language == 'rus' else
              f"Uploaded files: {len(uploaded_files)}")

if not st.session_state.knowledge_base.uploaded_files:
    st.info("Te rugƒÉm sƒÉ √Æncarci un CV pentru analizƒÉ" if st.session_state.language == 'rom' else
           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" if st.session_state.language == 'rus' else
           "Please upload a CV for analysis")
    st.stop()

# --- Best Matches Section ---
st.markdown(f"### üîç {get_translation('best_matches')}")

cv_text = st.session_state.knowledge_base.get_all_text()
vacancies = st.session_state.vacancies_data

if not vacancies:
    st.warning("Nu existƒÉ oferte de muncƒÉ disponibile. Te rugƒÉm sƒÉ √Æncarci ofertele mai √Ænt√¢i." if st.session_state.language == 'rom' else
              "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏." if st.session_state.language == 'rus' else
              "No job vacancies available. Please load vacancies first.")
    st.stop()

# [Rest of your matching analysis code remains the same]
# [Previous matching analysis implementation]

# --- API Configuration ---
api_key = st.secrets.get("DEEPSEEK_API_KEY")
if not api_key:
    st.error("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.")
    st.stop()

url = "https://api.deepseek.com/v1/chat/completions"
headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

# [Rest of your code with AI-generated content remains the same]
# [Previous implementations of check_if_ai_generated, generate_interview_questions, etc.]

# --- Update all UI elements to use get_translation() ---
# For example:
# st.button(get_translation('generate_analysis'))
# st.markdown(f"## üìä {get_translation('detailed_analysis')}")
# etc.

# [Continue with the rest of your application code, replacing all UI text with get_translation() calls]
